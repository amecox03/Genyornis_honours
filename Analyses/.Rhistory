#make dummy sequence of x for intervals.
newx <- seq(min_x-1,max_x+1,by = 0.05 )
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_interval <- predict(model1, newdata=data.frame(tbM.L = newx), interval="prediction",    level = 0.95)
plot(data = data_plot, fM.L ~ tbM.L,
xlim=c(1.6,4.5),
ylim=c(1.7,4.5),
pch=pch_vector, col=colours, ylab = "Mediolateral width of the femur", xlab = "Mediolateral width of the tibiotarsus",axes = TRUE, frame.plot = TRUE); abline(model1, col="black" )
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newx), newx), c(rev(conf_interval[ ,3]), conf_interval[ ,2]), density = 25, col = 'grey', border = NA)
points(data = data_plot, fM.L ~ tbM.L,
pch=pch_vector, col=colours); abline(model1, col="black" )
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
legend (x = "topleft", legend = c("Galliformes", "Anseriformes", "Extant Palaeognathae"), pch=pch_vector, col=colours)
#add row names to your plot
#text(log(data$fM.L) ~ log(data$tbM.L), labels=data$species )
#getting a model for predicting CIs
model1 <- lm(fM.L ~ tbM.L, data=datanoD_plot)
summary(model1)
#For the interval estimate to work, we need to find the smallest and largest values of x. All this is in https://stackoverflow.com/questions/46459620/plotting-a-95-confidence-interval-for-a-lm-object
#But X in this case has NAs so we're here finding the lowest non-NA value by sorting from smallest to largest and taking the first value
min_x <- sort(datanoD_plot$tbM.L)[1]
max_x <- sort(datanoD_plot$tbM.L, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newx <- seq(min_x-1,max_x+1,by = 0.05 )
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_interval <- predict(model1, newdata=data.frame(tbM.L = newx), interval="prediction",    level = 0.95)
plot(data = data_plot, fM.L ~ tbM.L,
xlim=c(1.6,4.5),
ylim=c(1.7,4.5),
pch=pch_vector, col=colours, ylab = "Mediolateral width of the femur", xlab = "Mediolateral width of the tibiotarsus",axes = TRUE, frame.plot = TRUE); abline(model1, col="black" )
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newx), newx), c(rev(conf_interval[ ,3]), conf_interval[ ,2]), density = 25, col = 'grey', border = NA)
points(data = data_plot, fM.L ~ tbM.L,
pch=pch_vector, col=colours); abline(model1, col="black" )
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
legend (x = "topleft", legend = c("Galliformes", "Anseriformes", "Casuariiformes", "Struthioniformes", "Dinornithiformes", "Aepyornithiformes"), pch=pch_vector, col=colours)
#add row names to your plot
#text(log(data$fM.L) ~ log(data$tbM.L), labels=data$species )
fem_splay <- data_plot[c(,25:27)]
fem_splay <- cbind(data_plot [,1:3], data_plot[,25:27])
View(fem_splay)
fem_splay <- na.omit(cbind(data_plot [,1:3], data_plot[,25:27]))
View(fem_splay)
View(largebirds_plot)
#making sure the linear measurements are log transformed
largebirds_plot <- cbind (largebirds_data[,1:3], log (largebirds_data[,4:18]))
#making sure the linear measurements are log transformed
lb_noD_plot <- cbind (largebirds_data[,1:3], log (largebirds_data[,4:18]))
#getting a model for predicting CIs
modelCircLB<- lm(fCIRC ~ tbCIRC, data=largebirds_plot)
summary(modelCircLB)
#For the interval estimate to work, we need to find the smallest and largest values of x. All this is in https://stackoverflow.com/questions/46459620/plotting-a-95-confidence-interval-for-a-lm-object
#But X in this case has NAs so we're here finding the lowest non-NA value by sorting from smallest to largest and taking the first value
min_xCIRCLB <- sort(largebirds_plot$tbCIRC)[1]
max_xCIRCLB <- sort(largebirds_plot$tbCIRC, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxCIRCLB <- seq(min_xCIRCLB-1,max_xCIRCLB+1,by = 0.05 )
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalCIRCLB <- predict(modelCircLB, newdata=data.frame(tbCIRC = newxCIRCLB), interval="prediction", level = 0.95)
plot(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours, ylab = "Femur circumference", xlab = "Tibiotarsus circumference",axes = TRUE, frame.plot = TRUE); abline(modelCirc, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxCIRCLB), newxCIRCLB), c(rev(conf_intervalCIRCLB [ ,3]), conf_intervalCIRCLB[ ,2]),density = 25, col = 'grey', border = NA)
points(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours2); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#add row names to your plot
#text(data=data_plot, fCIRC ~ tbCIRC, labels=data$species )
#getting a model for predicting CIs
modelCircLB<- lm(fCIRC ~ tbCIRC, data=largebirds_plot)
summary(modelCircLB)
#For the interval estimate to work, we need to find the smallest and largest values of x. All this is in https://stackoverflow.com/questions/46459620/plotting-a-95-confidence-interval-for-a-lm-object
#But X in this case has NAs so we're here finding the lowest non-NA value by sorting from smallest to largest and taking the first value
min_xCIRCLB <- sort(largebirds_plot$tbCIRC)[1]
max_xCIRCLB <- sort(largebirds_plot$tbCIRC, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxCIRCLB <- seq(min_xCIRCLB-1,max_xCIRCLB+1,by = 0.05 )
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalCIRCLB <- predict(modelCircLB, newdata=data.frame(tbCIRC = newxCIRCLB), interval="prediction", level = 0.95)
plot(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours, ylab = "Femur circumference", xlab = "Tibiotarsus circumference",axes = TRUE, frame.plot = TRUE); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxCIRCLB), newxCIRCLB), c(rev(conf_intervalCIRCLB [ ,3]), conf_intervalCIRCLB[ ,2]),density = 25, col = 'grey', border = NA)
points(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours2); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#add row names to your plot
#text(data=data_plot, fCIRC ~ tbCIRC, labels=data$species )
#Also here setting up a vector of colours you can use to highlight _Genyornis_
#make a vector of just pink
colours2 <- rep("hotpink", nrow(largebirds_plot))
#make a vector where any species name that has Genyornis is assigned purple
colours[which(largebirds_plot$species == "Genyornis newtoni")] <- "#33cc33"
colours[which(largebirds_plot$species == "Illbandornis lawsoni")] <- "#196619"
colours[which(largebirds_plot$species == "Illbandornis woodburnei")] <- "green"
colours[which(largebirds_plot$order == "Casuariiformes")] <- "#3333cc"
colours[which(largebirds_plot$order == "Struthioniformes")] <- "#3333cc"
colours[which(largebirds_plot$order == "Dinornithiformes")] <- "#b34700"
colours[which(largebirds_plot$order == "Aepyornithiformes")] <- "#cc0000"
pch_values2 <- c("Genyornis newtoni" = 19,"Illbandornis lawsoni" = 19, "Illbandornis woodburnei" = 19, "Dromornis stirtoni" = 19, "Casuarius casuarius" = 18, "Dromaius novaehollandiae" = 18, "Struthio camelus" = 18, "Dinornis robustus" = 18, "Dinornis novaezealandiae" = 18, "Pachyornis elephantopus" = 18, "Aepyornis hildebrandti" = 18, "Aepyornis maximus" = 18, "Mullerornis modestus" = 18)
pch_vector2 <- pch_values[largebirds_plot$species]
#getting a model for predicting CIs
modelCircLB<- lm(fCIRC ~ tbCIRC, data=largebirds_plot)
summary(modelCircLB)
#For the interval estimate to work, we need to find the smallest and largest values of x. All this is in https://stackoverflow.com/questions/46459620/plotting-a-95-confidence-interval-for-a-lm-object
#But X in this case has NAs so we're here finding the lowest non-NA value by sorting from smallest to largest and taking the first value
min_xCIRCLB <- sort(largebirds_plot$tbCIRC)[1]
max_xCIRCLB <- sort(largebirds_plot$tbCIRC, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxCIRCLB <- seq(min_xCIRCLB-1,max_xCIRCLB+1,by = 0.05 )
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalCIRCLB <- predict(modelCircLB, newdata=data.frame(tbCIRC = newxCIRCLB), interval="prediction", level = 0.95)
plot(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours, ylab = "Femur circumference", xlab = "Tibiotarsus circumference",axes = TRUE, frame.plot = TRUE); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxCIRCLB), newxCIRCLB), c(rev(conf_intervalCIRCLB [ ,3]), conf_intervalCIRCLB[ ,2]),density = 25, col = 'grey', border = NA)
points(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours2); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#add row names to your plot
#text(data=data_plot, fCIRC ~ tbCIRC, labels=data$species )
#getting a model for predicting CIs
modelCircLB<- lm(fCIRC ~ tbCIRC, data=lb_noD_plot)
summary(modelCircLB)
#For the interval estimate to work, we need to find the smallest and largest values of x. All this is in https://stackoverflow.com/questions/46459620/plotting-a-95-confidence-interval-for-a-lm-object
#But X in this case has NAs so we're here finding the lowest non-NA value by sorting from smallest to largest and taking the first value
min_xCIRCLB <- sort(lb_noD_plot$tbCIRC)[1]
max_xCIRCLB <- sort(lb_noD_plot$tbCIRC, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxCIRCLB <- seq(min_xCIRCLB-1,max_xCIRCLB+1,by = 0.05 )
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalCIRCLB <- predict(modelCircLB, newdata=data.frame(tbCIRC = newxCIRCLB), interval="prediction", level = 0.95)
plot(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours2, ylab = "Femur circumference", xlab = "Tibiotarsus circumference",axes = TRUE, frame.plot = TRUE); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxCIRCLB), newxCIRCLB), c(rev(conf_intervalCIRCLB [ ,3]), conf_intervalCIRCLB[ ,2]),density = 25, col = 'grey', border = NA)
points(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours2); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#add row names to your plot
#text(data=data_plot, fCIRC ~ tbCIRC, labels=data$species )
#Also here setting up a vector of colours you can use to highlight _Genyornis_
#make a vector of just pink
colours2 <- rep("hotpink", nrow(largebirds_plot))
#make a vector where any species name that has Genyornis is assigned purple
colours[which(largebirds_plot$species == "Genyornis newtoni")] <- "#33cc33"
colours[which(largebirds_plot$species == "Illbandornis lawsoni")] <- "#196619"
colours[which(largebirds_plot$species == "Illbandornis woodburnei")] <- "green"
colours[which(largebirds_plot$order == "Casuariiformes")] <- "#3333cc"
colours[which(largebirds_plot$order == "Struthioniformes")] <- "#3333cc"
colours[which(largebirds_plot$order == "Dinornithiformes")] <- "#b34700"
colours[which(largebirds_plot$order == "Aepyornithiformes")] <- "#cc0000"
pch_values2 <- c("Genyornis newtoni" = 19,"Illbandornis lawsoni" = 19, "Illbandornis woodburnei" = 19, "Dromornis stirtoni" = 19, "Casuarius casuarius" = 18, "Dromaius novaehollandiae" = 18, "Struthio camelus" = 18, "Dinornis robustus" = 18, "Dinornis novaezealandiae" = 18, "Pachyornis elephantopus" = 18, "Aepyornis hildebrandti" = 18, "Aepyornis maximus" = 18, "Mullerornis modestus" = 18)
#Also here setting up a vector of colours you can use to highlight _Genyornis_
#make a vector of just pink
colours2 <- rep("hotpink", nrow(largebirds_plot))
#make a vector where any species name that has Genyornis is assigned purple
colours[which(largebirds_plot$species == "Genyornis newtoni")] <- "#33cc33"
colours[which(largebirds_plot$species == "Illbandornis lawsoni")] <- "#196619"
colours[which(largebirds_plot$species == "Illbandornis woodburnei")] <- "green"
colours[which(largebirds_plot$order == "Casuariiformes")] <- "#3333cc"
colours[which(largebirds_plot$order == "Struthioniformes")] <- "#3333cc"
colours[which(largebirds_plot$order == "Dinornithiformes")] <- "#b34700"
colours[which(largebirds_plot$order == "Aepyornithiformes")] <- "#cc0000"
pch_values2 <- c("Genyornis newtoni" = 19,"Illbandornis lawsoni" = 19, "Illbandornis woodburnei" = 19, "Dromornis stirtoni" = 19, "Casuarius casuarius" = 18, "Dromaius novaehollandiae" = 18, "Struthio camelus" = 18, "Dinornis robustus" = 18, "Dinornis novaezealandiae" = 18, "Pachyornis elephantopus" = 18, "Aepyornis hildebrandti" = 18, "Aepyornis maximus" = 18, "Mullerornis modestus" = 18)
pch_vector2 <- pch_values[largebirds_plot$species]
#linear model of the femur width vs tibia width in large flightless birds
model3 <- lm(fM.L ~ tbM.L, data=lb_noD_plot)
#summary output of the linear model
summary (model3)
min_xB <- sort(lb_noD_plot$tbM.L)[1]
max_xB <- sort(lb_noD_plot$tbM.L, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxB <- seq(min_xB-1,max_xB+1,by = 0.05)
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalB <- predict(model3, newdata=data.frame(tbM.L = newxB), interval="prediction", level = 0.95)
plot (largebirds_plot$fM.L ~ largebirds_plot$tbM.L,
pch=pch_vector2, col=colours2, ylab = "Mediolateral width of the femur", xlab = "Mediolateral width of the tibiotarsus",axes = TRUE, frame.plot = TRUE ); abline(model3, col="black" )
lines(newxB, conf_intervalB[,2], col="blue", lty=2)
lines(newxB, conf_intervalB[,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxB), newxB), c(rev(conf_intervalB[ ,3]), conf_intervalB[ ,2]), density = 25, col = 'grey', border = NA)
points(largebirds_plot$fM.L ~ largebirds_plot$tbM.L,
pch=pch_vector2, col=colours2); abline(model3, col="black" )
lines(newxB, conf_intervalB[,2], col="blue", lty=2)
lines(newxB, conf_intervalB[,3], col="blue", lty=2)
#Also here setting up a vector of colours you can use to highlight _Genyornis_
#make a vector of just pink
colours <- rep("hotpink", nrow(largebirds_plot))
#make a vector where any species name that has Genyornis is assigned purple
colours[which(largebirds_plot$species == "Genyornis newtoni")] <- "#33cc33"
colours[which(largebirds_plot$species == "Illbandornis lawsoni")] <- "#196619"
colours[which(largebirds_plot$species == "Illbandornis woodburnei")] <- "green"
colours[which(largebirds_plot$order == "Casuariiformes")] <- "#3333cc"
colours[which(largebirds_plot$order == "Struthioniformes")] <- "#3333cc"
colours[which(largebirds_plot$order == "Dinornithiformes")] <- "#b34700"
colours[which(largebirds_plot$order == "Aepyornithiformes")] <- "#cc0000"
pch_values2 <- c("Genyornis newtoni" = 19,"Illbandornis lawsoni" = 19, "Illbandornis woodburnei" = 19, "Dromornis stirtoni" = 19, "Casuarius casuarius" = 18, "Dromaius novaehollandiae" = 18, "Struthio camelus" = 18, "Dinornis robustus" = 18, "Dinornis novaezealandiae" = 18, "Pachyornis elephantopus" = 18, "Aepyornis hildebrandti" = 18, "Aepyornis maximus" = 18, "Mullerornis modestus" = 18)
pch_vector2 <- pch_values[largebirds_plot$species]
#linear model of the femur width vs tibia width in large flightless birds
model3 <- lm(fM.L ~ tbM.L, data=lb_noD_plot)
#summary output of the linear model
summary (model3)
min_xB <- sort(lb_noD_plot$tbM.L)[1]
max_xB <- sort(lb_noD_plot$tbM.L, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxB <- seq(min_xB-1,max_xB+1,by = 0.05)
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalB <- predict(model3, newdata=data.frame(tbM.L = newxB), interval="prediction", level = 0.95)
plot (largebirds_plot$fM.L ~ largebirds_plot$tbM.L,
pch=pch_vector2, col=colours, ylab = "Mediolateral width of the femur", xlab = "Mediolateral width of the tibiotarsus",axes = TRUE, frame.plot = TRUE ); abline(model3, col="black" )
lines(newxB, conf_intervalB[,2], col="blue", lty=2)
lines(newxB, conf_intervalB[,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxB), newxB), c(rev(conf_intervalB[ ,3]), conf_intervalB[ ,2]), density = 25, col = 'grey', border = NA)
points(largebirds_plot$fM.L ~ largebirds_plot$tbM.L,
pch=pch_vector2, col=colours); abline(model3, col="black" )
lines(newxB, conf_intervalB[,2], col="blue", lty=2)
lines(newxB, conf_intervalB[,3], col="blue", lty=2)
#loading data
data<- read.csv (file = "../Data/Raw/honours_data.csv")
data_plot <- cbind (data[,1:3], log (data[,4:18]), data[,19:39])
#making a dataset that excludes dromornithids
data_noD <- data[-c(125:135),]
datanoD_plot <- cbind (data_noD[,1:3], log (data_noD[,4:16]))
#make a data set with extant ratites
ratite <- data[c(5:25),]
#make a data set with extinct large birds (ratites + dromorntithids)
extinct <- data[c(78:132),]
#combine the 2 datasets
largebirds_data <- rbind(ratite, extinct)
#making sure the linear measurements are log transformed
largebirds_plot <- cbind (largebirds_data[,1:3], log (largebirds_data[,4:18]))
#make a data set without dromornithids
extinct_noD <- data[c(78:124),]
#combined the 2 datasets
lb_noD <-largebirds_data <- rbind(ratite, extinct_noD)
#making sure the linear measurements are log transformed
lb_noD_plot <- cbind (largebirds_data[,1:3], log (largebirds_data[,4:18]))
#Also here setting up a vector of colours you can use to highlight _Genyornis_
#make a vector of just pink
colours <- rep("hotpink", nrow(largebirds_plot))
#make a vector where any species name that has Genyornis is assigned purple
colours[which(largebirds_plot$species == "Genyornis newtoni")] <- "#33cc33"
colours[which(largebirds_plot$species == "Illbandornis lawsoni")] <- "#196619"
colours[which(largebirds_plot$species == "Illbandornis woodburnei")] <- "green"
colours[which(largebirds_plot$order == "Casuariiformes")] <- "#3333cc"
colours[which(largebirds_plot$order == "Struthioniformes")] <- "#3333cc"
colours[which(largebirds_plot$order == "Dinornithiformes")] <- "#b34700"
colours[which(largebirds_plot$order == "Aepyornithiformes")] <- "#cc0000"
pch_values2 <- c("Genyornis newtoni" = 19,"Illbandornis lawsoni" = 19, "Illbandornis woodburnei" = 19, "Dromornis stirtoni" = 19, "Casuarius casuarius" = 18, "Dromaius novaehollandiae" = 18, "Struthio camelus" = 18, "Dinornis robustus" = 18, "Dinornis novaezealandiae" = 18, "Pachyornis elephantopus" = 18, "Aepyornis hildebrandti" = 18, "Aepyornis maximus" = 18, "Mullerornis modestus" = 18)
pch_vector2 <- pch_values[largebirds_plot$species]
#linear model of the femur width vs tibia width in large flightless birds
model3 <- lm(fM.L ~ tbM.L, data=lb_noD_plot)
#summary output of the linear model
summary (model3)
min_xB <- sort(lb_noD_plot$tbM.L)[1]
max_xB <- sort(lb_noD_plot$tbM.L, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxB <- seq(min_xB-1,max_xB+1,by = 0.05)
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalB <- predict(model3, newdata=data.frame(tbM.L = newxB), interval="prediction", level = 0.95)
plot (largebirds_plot$fM.L ~ largebirds_plot$tbM.L,
pch=pch_vector2, col=colours, ylab = "Mediolateral width of the femur", xlab = "Mediolateral width of the tibiotarsus",axes = TRUE, frame.plot = TRUE ); abline(model3, col="black" )
pch_vector2 <- pch_values[largebirds_plot$species]
pch_vector2 <- pch_values2[largebirds_plot$species]
```{r large bird regression for femur width and tibiotarsus width}
#linear model of the femur width vs tibia width in large flightless birds
model3 <- lm(fM.L ~ tbM.L, data=lb_noD_plot)
#summary output of the linear model
summary (model3)
min_xB <- sort(lb_noD_plot$tbM.L)[1]
max_xB <- sort(lb_noD_plot$tbM.L, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxB <- seq(min_xB-1,max_xB+1,by = 0.05)
#This only works if the data are already logged. Not my preference but hey.
conf_intervalB <- predict(model3, newdata=data.frame(tbM.L = newxB), interval="prediction", level = 0.95)
plot (largebirds_plot$fM.L ~ largebirds_plot$tbM.L,
pch=pch_vector2, col=colours, ylab = "Mediolateral width of the femur", xlab = "Mediolateral width of the tibiotarsus",axes = TRUE, frame.plot = TRUE ); abline(model3, col="black" )
lines(newxB, conf_intervalB[,2], col="blue", lty=2)
lines(newxB, conf_intervalB[,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxB), newxB), c(rev(conf_intervalB[ ,3]), conf_intervalB[ ,2]), density = 25, col = 'grey', border = NA)
points(largebirds_plot$fM.L ~ largebirds_plot$tbM.L,
pch=pch_vector2, col=colours); abline(model3, col="black" )
lines(newxB, conf_intervalB[,2], col="blue", lty=2)
lines(newxB, conf_intervalB[,3], col="blue", lty=2)
```{r plotting circumference just large birds}
#getting a model for predicting CIs
modelCircLB<- lm(fCIRC ~ tbCIRC, data=lb_noD_plot)
summary(modelCircLB)
#But X in this case has NAs so we're here finding the lowest non-NA value by sorting from smallest to largest and taking the first value
min_xCIRCLB <- sort(lb_noD_plot$tbCIRC)[1]
max_xCIRCLB <- sort(lb_noD_plot$tbCIRC, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxCIRCLB <- seq(min_xCIRCLB-1,max_xCIRCLB+1,by = 0.05 )
#This only works if the data are already logged. Not my preference but hey.
conf_intervalCIRCLB <- predict(modelCircLB, newdata=data.frame(tbCIRC = newxCIRCLB), interval="prediction", level = 0.95)
plot(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours, ylab = "Femur circumference", xlab = "Tibiotarsus circumference",axes = TRUE, frame.plot = TRUE); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxCIRCLB), newxCIRCLB), c(rev(conf_intervalCIRCLB [ ,3]), conf_intervalCIRCLB[ ,2]),density = 25, col = 'grey', border = NA)
points(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
colours[which(largebirds_plot$species == "Dromornis stirtoni")] <- "#454B1B"
#getting a model for predicting CIs
modelCircLB<- lm(fCIRC ~ tbCIRC, data=lb_noD_plot)
summary(modelCircLB)
#For the interval estimate to work, we need to find the smallest and largest values of x. All this is in https://stackoverflow.com/questions/46459620/plotting-a-95-confidence-interval-for-a-lm-object
#But X in this case has NAs so we're here finding the lowest non-NA value by sorting from smallest to largest and taking the first value
min_xCIRCLB <- sort(lb_noD_plot$tbCIRC)[1]
max_xCIRCLB <- sort(lb_noD_plot$tbCIRC, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxCIRCLB <- seq(min_xCIRCLB-1,max_xCIRCLB+1,by = 0.05 )
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalCIRCLB <- predict(modelCircLB, newdata=data.frame(tbCIRC = newxCIRCLB), interval="prediction", level = 0.95)
plot(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours, ylab = "Femur circumference", xlab = "Tibiotarsus circumference",axes = TRUE, frame.plot = TRUE); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxCIRCLB), newxCIRCLB), c(rev(conf_intervalCIRCLB [ ,3]), conf_intervalCIRCLB[ ,2]),density = 25, col = 'grey', border = NA)
points(data=largebirds_plot, fCIRC ~ tbCIRC,
pch=pch_vector2, col=colours); abline(modelCircLB, col="black" )
lines(newxCIRCLB, conf_intervalCIRCLB [,2], col="blue", lty=2)
lines(newxCIRCLB, conf_intervalCIRCLB [,3], col="blue", lty=2)
#add row names to your plot
#text(data=data_plot, fCIRC ~ tbCIRC, labels=data$species )
#Also here setting up a vector of colours you can use to highlight _Genyornis_
#make a vector of just pink
colours <- rep("#33cc33",nrow(data_plot))
#make a vector where any species name that has Genyornis is assigned purple
colours[which(data_plot$species == "Genyornis newtoni")] <- "#33cc33"
colours[which(data_plot$species == "Illbandornis lawsoni")] <- "#196619"
colours[which(data_plot$species == "Illbandornis woodburnei")] <- "green"
colours[which(data_plot$species == "Dromornis stirtoni")] <- "#454B1B"
colours[which(data_plot$order == "Anseriformes")] <- "#ff0055"
colours[which(data_plot$order == "Galliformes")] <- "#800080"
colours[which(data_plot$order == "Casuariiformes")] <- "#3333cc"
colours[which(data_plot$order == "Struthioniformes")] <- "#3333cc"
colours[which(data_plot$order == "Dinornithiformes")] <- "#b34700"
colours[which(data_plot$order == "Aepyornithiformes")] <- "#cc0000"
pch_values <- c("Genyornis newtoni" = 19,"Illbandornis lawsoni" = 19, "Illbandornis woodburnei" = 19, "Dromornis stirtoni" = 19, "Anhima cornuta" = 17, "Anseranas semipalmata" = 17, "Cereopsis novaehollandiae" = 17, "Leipoa ocellata" = 15, "Alectura lathami" = 15, "Casuarius casuarius" = 18, "Dromaius novaehollandiae" = 18, "Struthio camelus" = 18, "Dinornis robustus" = 18, "Dinornis novaezealandiae" = 18, "Pachyornis elephantopus" = 18, "Aepyornis hildebrandti" = 18, "Aepyornis maximus" = 18, "Mullerornis modestus" = 18)
pch_vector <- pch_values[data_plot$species]
#getting a model for predicting CIs
modelCirc<- lm(fCIRC ~ tbCIRC, data=data_plot)
summary(modelCirc)
#For the interval estimate to work, we need to find the smallest and largest values of x. All this is in https://stackoverflow.com/questions/46459620/plotting-a-95-confidence-interval-for-a-lm-object
#But X in this case has NAs so we're here finding the lowest non-NA value by sorting from smallest to largest and taking the first value
min_xCIRC <- sort(data_plot$tbCIRC)[1]
max_xCIRC <- sort(data_plot$tbCIRC, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxCIRC <- seq(min_xCIRC-1,max_xCIRC+1,by = 0.05 )
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalCIRC <- predict(modelCirc, newdata=data.frame(tbCIRC = newxCIRC), interval="prediction", level = 0.95)
plot(data=data_plot, fCIRC ~ tbCIRC,
pch=pch_vector, col=colours, ylab = "Femur circumference", xlab = "Tibiotarsus circumference",axes = TRUE, frame.plot = TRUE); abline(modelCirc, col="black" )
lines(newxCIRC, conf_intervalCIRC [,2], col="blue", lty=2)
lines(newxCIRC, conf_intervalCIRC [,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxCIRC), newxCIRC), c(rev(conf_intervalCIRC [ ,3]), conf_intervalCIRC[ ,2]),density = 25, col = 'grey', border = NA)
points(data=data_plot, fCIRC ~ tbCIRC,
pch=pch_vector, col=colours); abline(modelCirc, col="black" )
lines(newxCIRC, conf_intervalCIRC [,2], col="blue", lty=2)
lines(newxCIRC, conf_intervalCIRC [,3], col="blue", lty=2)
#add row names to your plot
#text(data=data_plot, fCIRC ~ tbCIRC, labels=data$species )
View(modelCirc)
View(modelCirc)
summary(modelCirc)
summary(modelCircLB)
#getting a model for predicting CIs
modelCirc<- lm(fCIRC ~ tbCIRC, data=data_plot)
summary(modelCirc)
#getting a model for predicting CIs
modelFW <- lm(fM.L ~ fCr.Ca, data=datanoD_plot)
summary(modelFW)
#For the interval estimate to work, we need to find the smallest and largest values of x. All this is in https://stackoverflow.com/questions/46459620/plotting-a-95-confidence-interval-for-a-lm-object
#But X in this case has NAs so we're here finding the lowest non-NA value by sorting from smallest to largest and taking the first value
min_xFW <- sort(datanoD_plot$fCr.Ca)[1]
max_xFW <- sort(datanoD_plot$fCr.Ca, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxFW <- seq(min_xFW-1,max_xFW+1,by = 0.05 )
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalFW <- predict(modelFW, newdata=data.frame(fCr.Ca = newxFW), interval="prediction", level = 0.95)
#plotting the femur widths
plot(data=data_plot, fM.L ~ fCr.Ca,
pch=pch_vector, col=colours, ylab = "Femur mediolateral width", xlab = "Femur craniocaudal width",axes = TRUE, frame.plot = TRUE); abline(modelFW, col="black" )
#for some reason the newxFW has returned a large value than confidence interval
lines(newxFW, conf_intervalFW [,2], col="blue", lty=2)
lines(newxFW, conf_intervalFW [,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxFW), newxFW), c(rev(conf_intervalFW [ ,3]), conf_intervalFW[ ,2]),density = 25, col = 'grey', border = NA)
#replotting points and prediction intervals
points(data=data_plot, fM.L ~ fCr.Ca,
pch=pch_vector, col=colours); abline(modelFW, col="black" )
lines(newxFW, conf_intervalFW [,2], col="blue", lty=2)
lines(newxFW, conf_intervalFW [,3], col="blue", lty=2)
#getting a model for predicting CIs
modelFW <- lm(fM.L ~ fCr.Ca, data=datanoD_plot)
summary(modelFW)
#For the interval estimate to work, we need to find the smallest and largest values of x. All this is in https://stackoverflow.com/questions/46459620/plotting-a-95-confidence-interval-for-a-lm-object
#But X in this case has NAs so we're here finding the lowest non-NA value by sorting from smallest to largest and taking the first value
min_xFW <- sort(datanoD_plot$fCr.Ca)[1]
max_xFW <- sort(datanoD_plot$fCr.Ca, decreasing = TRUE)[1]
#make dummy sequence of x for intervals.
newxFW <- seq(min_xFW-1,max_xFW+1,by = 0.05 )
#plot confidence intervals
#This only works if the data are already logged. Not my preference but hey.
conf_intervalFW <- predict(modelFW, newdata=data.frame(fCr.Ca = newxFW), interval="prediction", level = 0.95)
#plotting the femur widths
plot(data=data_plot, fM.L ~ fCr.Ca,
pch=pch_vector, col=colours, ylab = "Femur mediolateral width", xlab = "Femur craniocaudal width",axes = TRUE, frame.plot = TRUE); abline(modelFW, col="black" )
#for some reason the newxFW has returned a large value than confidence interval
lines(newxFW, conf_intervalFW [,2], col="blue", lty=2)
lines(newxFW, conf_intervalFW [,3], col="blue", lty=2)
#fill in area between regression line and confidence interval - very pretty but then you have to re-plot the points
polygon(c(rev(newxFW), newxFW), c(rev(conf_intervalFW [ ,3]), conf_intervalFW[ ,2]),density = 25, col = 'grey', border = NA)
#replotting points and prediction intervals
points(data=data_plot, fM.L ~ fCr.Ca,
pch=pch_vector, col=colours); abline(modelFW, col="black" )
lines(newxFW, conf_intervalFW [,2], col="blue", lty=2)
lines(newxFW, conf_intervalFW [,3], col="blue", lty=2)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, results='hide' )
#this sets the directory to the source directory without having to manually click your way there
library(rstudioapi) # Safely Access the RStudio API
setwd(dirname(getActiveDocumentContext()$path))
library(Ternary)
library(tidyverse)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, results='hide' )
#this sets the directory to the source directory without having to manually click your way there
library(rstudioapi) # Safely Access the RStudio API
setwd(dirname(getActiveDocumentContext()$path))
library(Ternary)
library(tidyverse)
#loading data
data<- read.csv (file = "../Data/Raw/honours_data.csv")
data_plot <- cbind (data[,1:3], log (data[,4:18]), data[,19:39])
#making a dataset that excludes dromornithids
data_noD <- data[-c(125:135),]
datanoD_plot <- cbind (data_noD[,1:3], log (data_noD[,4:16]))
#Also here setting up a vector of colours you can use to highlight _Genyornis_
#make a vector of just pink
colours <- rep("#33cc33",nrow(data_plot))
#make a vector where any species name that has Genyornis is assigned purple
colours[which(data_plot$species == "Genyornis newtoni")] <- "#33cc33"
colours[which(data_plot$species == "Illbandornis lawsoni")] <- "#196619"
colours[which(data_plot$species == "Illbandornis woodburnei")] <- "green"
colours[which(data_plot$species == "Dromornis stirtoni")] <- "#454B1B"
colours[which(data_plot$order == "Anseriformes")] <- "#ff0055"
colours[which(data_plot$order == "Galliformes")] <- "#800080"
colours[which(data_plot$order == "Casuariiformes")] <- "#3333cc"
colours[which(data_plot$order == "Struthioniformes")] <- "#3333cc"
colours[which(data_plot$order == "Dinornithiformes")] <- "#b34700"
colours[which(data_plot$order == "Aepyornithiformes")] <- "#cc0000"
#data_plot$species <- 19
#data_plot$species[which (data_plot$species == "Genyornis newtoni")] <- 0
#Also here setting up a vector of colours you can use to highlight _Genyornis_
#make a vector of just pink
colours <- rep("#33cc33",nrow(data_plot))
#make a vector where any species name that has Genyornis is assigned purple
colours[which(data_plot$species == "Genyornis newtoni")] <- "#33cc33"
colours[which(data_plot$species == "Illbandornis lawsoni")] <- "#196619"
colours[which(data_plot$species == "Illbandornis woodburnei")] <- "green"
colours[which(data_plot$species == "Dromornis stirtoni")] <- "#454B1B"
colours[which(data_plot$order == "Anseriformes")] <- "#ff0055"
colours[which(data_plot$order == "Galliformes")] <- "#800080"
colours[which(data_plot$order == "Casuariiformes")] <- "#3333cc"
colours[which(data_plot$order == "Struthioniformes")] <- "#3333cc"
colours[which(data_plot$order == "Dinornithiformes")] <- "#b34700"
colours[which(data_plot$order == "Aepyornithiformes")] <- "#cc0000"
#assigning each species a different symbol
pch_values <- c("Genyornis newtoni" = 19,"Illbandornis lawsoni" = 19, "Illbandornis woodburnei" = 19, "Dromornis stirtoni" = 19, "Anhima cornuta" = 17, "Anseranas semipalmata" = 17, "Cereopsis novaehollandiae" = 17, "Leipoa ocellata" = 15, "Alectura lathami" = 15, "Casuarius casuarius" = 18, "Dromaius novaehollandiae" = 18, "Struthio camelus" = 18, "Dinornis robustus" = 18, "Dinornis novaezealandiae" = 18, "Pachyornis elephantopus" = 18, "Aepyornis hildebrandti" = 18, "Aepyornis maximus" = 18, "Mullerornis modestus" = 18)
#creating a vector of pch values based on species
pch_vector <- pch_values[data_plot$species]
#making a subset dataset that includes just the femoral dorsal view angluar measurements aka the femoral splay
fem_splay <- na.omit(cbind(data_plot [,1:3], data_plot[,25:27]))
